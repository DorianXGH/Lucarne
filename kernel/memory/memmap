0x00001000 : kernel
0x00007c00 : bootloader
0x00009000 : stack
0x00009100 : memory map


Info:
sysinfo : 0 : available
sysinfo : 1 : used

GRUB bootloader
0x00100000 : kernel
0x00200000 : grub_info
0x00300000 : stack

Internal Page Memory Map
cell : 32 bits -> 2 bit info
Map : 0 = free
To allocate : check if all 0, then put the smallest number different from its adjacent cell.
To free : put to 0 all adjacent cellinfo having the same number


// old code : may be useful : idendity page first 4 kio

// int page_table_page = palloc();
// struct pte * page_table = (struct pte *) (page_table_page * 0x1000);
// for (int i = 0; i < 1024; i++) {
//     struct pte entry;
//     entry.accessed         = 0;
//     entry.sysinfo          = 1;
//     entry.dirty            = 0;
//     entry.user             = 0;
//     entry.write            = 1;
//     entry.reserved2        = 0;
//     entry.reserved         = 0;
//     entry.present          = 1;
//     entry.physical_address = i;
//     page_table[i]          = entry;
// }
// struct pde entry;
// entry.accessed           = 0;
// entry.size               = 0;
// entry.cache_disabled     = 0;
// entry.sysinfo            = 1;
// entry.user               = 0;
// entry.write              = 1;
// entry.present            = 1;
// entry.global             = 0;
// entry.wrtie_through      = 0;
// entry.page_table_address = page_table_page;
// ((struct pde *) general_page_directory)[0] = entry;
